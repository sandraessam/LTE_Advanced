%% Sandra Essam
%% Actual patameters
clear all
clc
EbNo_range=0:10;
N_OFDMsymbols=14;
N_ITERATION=1:1e4;
ModulationOrder=4;
N_subcarriers=512;
N_Datasubcarriers=300;
SamplingRate=7.68e6;
Max_DelaySpread=3e-6;
CP_length=4.7e-6;
CFIN_BITS=32;
BER=[];
%%CFI Table
CFI_Table=[0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1;
           1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0;
           1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1]; 
N_Bits=N_Datasubcarriers*log2(ModulationOrder)*N_OFDMsymbols;
No_Paths=round(SamplingRate*Max_DelaySpread);
% ERROR=0;
% Ebno=100;
for Ebno=EbNo_range
Error=0;    
ERROR=0;    
for n=N_ITERATION
Eb=((ModulationOrder-1)*4)/(6*log2(ModulationOrder)*N_subcarriers);
No=Eb/db2pow(Ebno);
%%Generate CFI
CFI=randi([1 3]);
%% encoding CFI value dependng CFI_Table
CFI_codeword=CFI_Table(CFI,:).';
%%Generate CFI Symbols
CFI_Symbols=qammod(CFI_codeword,ModulationOrder,'InputType','bit');
%% Transmitter
%%Generate Bits
Bits=randi([0 1],N_Bits,1);
%%Generate Symbols
Symbols=qammod(Bits,ModulationOrder,'InputType','bit');
%%Serial TO parralel
ParralelSymbol=reshape(Symbols,N_Datasubcarriers,N_OFDMsymbols);
%%put CFI Symbols
CFI_mapping= [2 3 5 6 20 21 23 24 36 37 39 40 56 57 59 60];
S = CFI_mapping;
ParralelSymbol(S,1) = CFI_Symbols;
%%Guard
GuardSide=zeros((N_subcarriers-N_Datasubcarriers)/2,N_OFDMsymbols);
SIG=[GuardSide;ParralelSymbol;GuardSide];
%%IFFT
sig=ifft(SIG);
%%CyclicPrefix
CP_samples=round(SamplingRate*CP_length);
sig_with_cp=[sig(N_subcarriers-CP_samples+1:N_subcarriers,:);sig];
%%serialization
sig_with_cp=reshape(sig_with_cp,1,size(sig_with_cp,1)*size(sig_with_cp,2));
%% Channel
h=sqrt(1/(2*No_Paths))*(randn(1,No_Paths)+1i.*randn(1,No_Paths));
sig_with_channel=[conv(sig_with_cp,h)];
%%AWGN
AWGN=(sqrt(No/2))*(randn(size(sig_with_channel))+1i*randn(size(sig_with_channel)));
sig_with_noise=sig_with_channel+AWGN;
%% RECIEVER
signal=sig_with_noise(1:length(sig_with_cp));
Recieved_sig=reshape(signal,N_subcarriers+CP_samples,N_OFDMsymbols);
%%Remove CP
Recieved_sig(1:CP_samples,:)=[];
%%FFT
Recieved_SIG=fft(Recieved_sig);
%%Equalization
H=fft(transpose(h),N_subcarriers);
Estimated_SIG=Recieved_SIG./repmat(H,[1,14]);
%%Remove Guards
Recieved=Estimated_SIG(((N_subcarriers-N_Datasubcarriers)/2)+1:N_subcarriers-((N_subcarriers-N_Datasubcarriers)/2),:);
%%Extract CFI symbols
Recieved_CFI_symbols=Recieved(S,1);
%%Demodulation CFI symbols
Recieved_CFI_Bit=qamdemod(Recieved_CFI_symbols,ModulationOrder,'Output','bit');
%%Minimum Distance
Dist1=sum(Recieved_CFI_Bit.'~=CFI_Table(1,:));
Dist2=sum(Recieved_CFI_Bit.'~=CFI_Table(2,:));
Dist3=sum(Recieved_CFI_Bit.'~=CFI_Table(3,:));
Dist=[Dist1 Dist2 Dist3];
[n m]=min(Dist);
Error=Error+(m~=CFI);
%%parrallel to series
Recieved_series=reshape(Recieved,N_Datasubcarriers*N_OFDMsymbols,1);
%%Demodulation
% Recovered_Bits=qamdemod(Recieved_series,ModulationOrder,'Output','bit');
%%DeMapper
% ERROR=ERROR+(sum(Bits~=Recovered_Bits)./(N_Bits));
 end
% ber=ERROR./(length(N_ITERATION));
ber=Error./(length(N_ITERATION));
BER=[BER ber]
end
hold on
semilogy(EbNo_range,BER,'-p')
