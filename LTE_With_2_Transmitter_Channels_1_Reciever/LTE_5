%% Sandra Essam
%% Actual patameters
clear all
clc
EbNo_range=0:3:30 ;
N_OFDMsymbols=1;
N_ITERATION=1:1e4;
ModulationOrder=64;
N_subcarriers=512;
N_Datasubcarriers=300;
SamplingRate=7.68e6;
Max_DelaySpread=1e-6;
CP_length=4.7e-6;
BER=[];
N_Bits=N_Datasubcarriers*log2(ModulationOrder)*N_OFDMsymbols;
No_Paths=round(SamplingRate*Max_DelaySpread);
ERROR=0;
% Ebno=100;
for Ebno=EbNo_range
ERROR=0;    
for n=N_ITERATION
Eb=((ModulationOrder-1)*4)/(6*log2(ModulationOrder)*N_subcarriers);
No=Eb/db2pow(Ebno);
%% Transmitter
%%Generate Bits
Bits=randi([0 1],N_Bits,1);
%%Generate Symbols
Symbols=qammod(Bits,ModulationOrder,'InputType','bit');
%%TX 1 & TX 2 Generation
Tx_1=Symbols;
Tx_2(2:2:N_Datasubcarriers,:)=conj(Symbols(1:2:end));
Tx_2(1:2:N_Datasubcarriers,:)=-conj(Symbols(2:2:end));
%%Serial TO parralel
ParralelSymbol=reshape(Tx_1,N_Datasubcarriers,N_OFDMsymbols);
ParralelSymbol2=reshape(Tx_2,N_Datasubcarriers,N_OFDMsymbols);
%%Guard
GuardSide=zeros((N_subcarriers-N_Datasubcarriers)/2,N_OFDMsymbols);
SIG=[GuardSide;ParralelSymbol;GuardSide];
SIG2=[GuardSide;ParralelSymbol2;GuardSide];
%%IFFT
sig=ifft(SIG);
sig2=ifft(SIG2);
%%CyclicPrefix
CP_samples=round(SamplingRate*CP_length);
sig_with_cp=[sig(N_subcarriers-CP_samples+1:N_subcarriers,:);sig];
sig_with_cp2=[sig2(N_subcarriers-CP_samples+1:N_subcarriers,:);sig2];
%%serialization
sig_with_cp=reshape(sig_with_cp,1,size(sig_with_cp,1)*size(sig_with_cp,2));
sig_with_cp2=reshape(sig_with_cp2,1,size(sig_with_cp2,1)*size(sig_with_cp2,2));
%% Channel
h=sqrt(1/(2*No_Paths))*(randn(1,No_Paths)+1i.*randn(1,No_Paths));
h2=sqrt(1/(2*No_Paths))*(randn(1,No_Paths)+1i.*randn(1,No_Paths));
sig_with_channel=[conv(sig_with_cp,h)];
sig_with_channel2=[conv(sig_with_cp2,h2)];
%%AWGN
AWGN=(sqrt(No/2))*(randn(size(sig_with_channel))+1i*randn(size(sig_with_channel)));
sig_with_noise=sig_with_channel+sig_with_channel2+AWGN;
%% RECIEVER
signal=sig_with_noise(1:length(sig_with_cp));
Recieved_sig=reshape(signal,N_subcarriers+CP_samples,N_OFDMsymbols);
%%Remove CP
Recieved_sig(1:CP_samples,:)=[];
%%FFT
Recieved_SIG=fft(Recieved_sig);
%%Equalization
H=fft(h.',N_subcarriers);
H2=fft(h2.',N_subcarriers);
H_decimate=H(1:2:end,:);
H2_decimate=H2(1:2:end,:);
%Estimated_SIG=Recieved_SIG./H;
Rx_1=Recieved_SIG(1:2:end);
Rx_2=Recieved_SIG(2:2:end);
Estimated_SIG=((conj(H_decimate).*Rx_1)+(H2_decimate).*conj(Rx_2))./((abs(H_decimate)).^2+(abs(H2_decimate)).^2);
Estimated_SIG2=((conj(H_decimate).*Rx_2)-(H2_decimate).*conj(Rx_1))./((abs(H_decimate)).^2+(abs(H2_decimate)).^2);
%reconstruct signal
R(1:2:N_subcarriers,:)=Estimated_SIG;
R(2:2:N_subcarriers,:)=Estimated_SIG2;
%%Remove Guards
Recieved=R(((N_subcarriers-N_Datasubcarriers)/2)+1:N_subcarriers-((N_subcarriers-N_Datasubcarriers)/2),:);
%%parrallel to series
Recieved_series=reshape(Recieved,N_Datasubcarriers*N_OFDMsymbols,1);
%%Demodulation
Recovered_Bits=qamdemod(Recieved_series,ModulationOrder,'Output','bit');
%%DeMapper
ERROR=ERROR+(sum(Bits~=Recovered_Bits)./(N_Bits));
 end
ber=ERROR./(length(N_ITERATION));
BER=[BER ber]
end
hold on
semilogy(EbNo_range,BER,'-^b')
